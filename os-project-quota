#!/bin/bash
# simple script to scrap the Openstack tool and get Quotas for a project and ship it up to Influxdb
# This requires jq to be installed @ /usr/bin/jq
# Usage: os-project-quota <project-id> <influxdb url>
# Joshua Snyder : josh@imagestream.com

quota_write=$(mktemp /tmp/influx.XXXXXXXXX)

q_json=$(mktemp /tmp/q-json.XXXXXXXXX)
os_vol=$(mktemp /tmp/os-vol.XXXXXXXXX)
os_q=$(mktemp /tmp/os-q.XXXXXXXXX)
os_vs=$(mktemp /tmp/os-vs.XXXXXXXXX)
os_is=$(mktemp /tmp/os-is.XXXXXXXXX)

/usr/local/bin/openstack --os-cloud admin limits show --project $1 --absolute -f json > $q_json
/usr/local/bin/openstack --os-cloud admin volume list --project $1 -f json > $os_vol 
/usr/local/bin/openstack --os-cloud admin quota show $1 -f json > $os_q
/usr/local/bin/openstack --os-cloud admin volume snapshot list --project $1 -f json > $os_vs
/usr/local/bin/openstack --os-cloud admin server list --project $1 -f json > $os_is
/usr/local/bin/openstack --os-cloud admin ip availability list -f json > $os_ipa

#jq '.[] | select(.Name=="totalCoresUsed")."Value" '

MAX_SERVER_META=$(/usr/bin/jq '.[] | select(.Name=="maxServerMeta")."Value" ' 				$q_json)
MAX_TOTAL_INSTANCES=$(/usr/bin/jq '.[] | select(.Name=="maxTotalInstances")."Value" ' 			$q_json)
MAX_PERSONALITY=$(/usr/bin/jq '.[] | select(.Name=="maxPersonality")."Value" ' 				$q_json)
TOTAL_SERVER_GROUPS_USED=$(/usr/bin/jq '.[] | select(.Name=="maxPersonality")."Value" ' 		$q_json)
MAX_IMAGE_META=$(/usr/bin/jq '.[] | select(.Name=="maxImageMeta")."Value" ' 				$q_json)
MAX_PERSONALITY_SIZE=$(/usr/bin/jq '.[] | select(.Name=="maxPersonalitySize")."Value" ' 		$q_json)
MAX_TOTAL_RAM_SIZE=$(/usr/bin/jq '.[] | select(.Name=="maxTotalRAMSize")."Value" ' 			$q_json)
MAX_SERVER_GROUPS=$(/usr/bin/jq '.[] | select(.Name=="maxServerGroups")."Value" ' 			$q_json)
MAX_SECURITY_GROUP_RULES=$(/usr/bin/jq '.[] | select(.Name=="maxSecurityGroupRules")."Value" ' 		$q_json)
MAX_TOTAL_KEYPAIRS=$(/usr/bin/jq '.[] | select(.Name=="maxTotalKeypairs")."Value" ' 			$q_json)
TOTAL_CORES_USED=$(/usr/bin/jq '.[] | select(.Name=="totalCoresUsed")."Value" ' 			$q_json)
TOTAL_RAM_USED=$(/usr/bin/jq '.[] | select(.Name=="totalRAMUsed")."Value" ' 				$q_json)
MAX_SECURITY_GROUPS=$(/usr/bin/jq '.[] | select(.Name=="maxSecurityGroups")."Value" ' 			$q_json)
TOTAL_FLOATING_IPS_USED=$(/usr/bin/jq '.[] | select(.Name=="totalFloatingIpsUsed")."Value" ' 		$q_json)
TOTAL_INSTANCES_USED=$(/usr/bin/jq '.[] | select(.Name=="totalInstancesUsed")."Value" ' 		$q_json)
MAX_SERVER_GROUP_MEMEBERS=$(/usr/bin/jq '.[] | select(.Name=="maxServerGroupMembers")."Value" ' 	$q_json)
MAX_TOTAL_FLOATING_IPS=$(/usr/bin/jq '.[] | select(.Name=="maxTotalFloatingIps")."Value" ' 		$q_json)
TOTAL_SECURITY_GROUPS_USED=$(/usr/bin/jq '.[] | select(.Name=="totalSecurityGroupsUsed")."Value" ' 	$q_json)
MAX_TOTAL_CORES=$(/usr/bin/jq '.[] | select(.Name=="maxTotalCores")."Value" ' 				$q_json)
TOTAL_SNAPSHOTS_USED=$(/usr/bin/jq '.[] | select(.Name=="totalSnapshotsUsed")."Value" ' 		$q_json)
MAX_TOTAL_BACKUPS=$(/usr/bin/jq '.[] | select(.Name=="maxTotalBackups")."Value" ' 			$q_json)
MAX_TOTAL_VOLUME_GIGABYTES=$(/usr/bin/jq '.[] | select(.Name=="maxTotalVolumeGigabytes")."Value" ' 	$q_json)
MAX_TOTAL_SNAPSHOTS=$(/usr/bin/jq '.[] | select(.Name=="maxTotalSnapshots")."Value" ' 			$q_json)
MAX_TOTAL_BACKUP_GIGABYTES=$(/usr/bin/jq '.[] | select(.Name=="maxTotalBackupGigabytes")."Value" ' 	$q_json)
TOTAL_BACKUP_GIGABYTES_USED=$(/usr/bin/jq '.[] | select(.Name=="totalBackupGigabytesUsed")."Value" ' 	$q_json)
MAX_TOTAL_VOLUMES=$(/usr/bin/jq '.[] | select(.Name=="maxTotalVolumes")."Value" ' 			$q_json)
TOTAL_VOLUMES_USED=$(/usr/bin/jq '.[] | select(.Name=="totalVolumesUsed")."Value" ' 			$q_json)
TOTAL_BACKUPS_USED=$(/usr/bin/jq '.[] | select(.Name=="totalBackupsUsed")."Value" ' 			$q_json)
TOTAL_GIGABYTES_USED=$(/usr/bin/jq '.[] | select(.Name=="totalGigabytesUsed")."Value" ' 		$q_json)
INSTANCES_ACTIVE=$(/usr/bin/jq '.[].Status == "ACTIVE"' | wc -l                                         $os_is)
INSTANCES_SHUTDOWN=$(/usr/bin/jq '.[].Status == "SHUTDOWN"' | wc -l                                     $os_is)

TOTAL_VOLUMES_USED_GIGABYTES=$(/usr/bin/jq -s '.[] | map(.Size) | add //0 '				$os_vol)
TOTAL_SNAPSHOTS_USED_GIGABYTES=$(/usr/bin/jq -s '.[] | map(.Size) | add //0 '				$os_vs)
TOTAL_STORAGE_QUOTA_GIGABYTES=$(/usr/bin/jq '.gigabytes'  						$os_q)

echo "maxServerMeta,Project=$1 value=$MAX_SERVER_META"      				>> $quota_write
echo "maxTotalInstances,Project=$1 value=$MAX_TOTAL_INSTANCES"      			>> $quota_write
echo "maxPersonality,Project=$1 value=$MAX_PERSONALITY"      				>> $quota_write
echo "totalServerGroupsUsed,Project=$1 value=$TOTAL_SERVER_GROUPS_USED"      		>> $quota_write
echo "maxImageMeta,Project=$1 value=$MAX_IMAGE_META"      				>> $quota_write
echo "maxPersonalitySize,Project=$1 value=$MAX_PERSONALITY_SIZE"      			>> $quota_write
echo "maxTotalRAMSize,Project=$1 value=$MAX_TOTAL_RAM_SIZE"      			>> $quota_write
echo "maxServerGroups,Project=$1 value=$MAX_SERVER_GROUPS"      			>> $quota_write
echo "maxSecurityGroupRules,Project=$1 value=$MAX_SECURITY_GROUP_RULES"      		>> $quota_write
echo "maxTotalKeypairs,Project=$1 value=$MAX_TOTAL_KEYPAIRS"      			>> $quota_write
echo "totalCoresUsed,Project=$1 value=$TOTAL_CORES_USED"      				>> $quota_write
echo "totalRAMUsed,Project=$1 value=$TOTAL_RAM_USED"      				>> $quota_write
echo "maxSecurityGroups,Project=$1 value=$MAX_SECURITY_GROUPS"      			>> $quota_write
echo "totalFloatingIpsUsed,Project=$1 value=$TOTAL_FLOATING_IPS_USED"      		>> $quota_write
echo "totalInstancesUsed,Project=$1 value=$TOTAL_INSTANCES_USED"      			>> $quota_write
echo "maxServerGroupMembers,Project=$1 value=$MAX_SERVER_GROUP_MEMEBERS"      		>> $quota_write
echo "maxTotalFloatingIps,Project=$1 value=$MAX_TOTAL_FLOATING_IPS"      		>> $quota_write
echo "totalSecurityGroupsUsed,Project=$1 value=$TOTAL_SECURITY_GROUPS_USED"      	>> $quota_write
echo "maxTotalCores,Project=$1 value=$MAX_TOTAL_CORES"      				>> $quota_write
echo "totalSnapshotsUsed,Project=$1 value=$TOTAL_SNAPSHOTS_USED"      			>> $quota_write
echo "maxTotalBackups,Project=$1 value=$MAX_TOTAL_BACKUPS"      			>> $quota_write
echo "maxTotalVolumeGigabytes,Project=$1 value=$MAX_TOTAL_VOLUME_GIGABYTES"      	>> $quota_write
echo "maxTotalSnapshots,Project=$1 value=$MAX_TOTAL_SNAPSHOTS"      			>> $quota_write
echo "maxTotalBackupGigabytes,Project=$1 value=$MAX_TOTAL_BACKUP_GIGABYTES"      	>> $quota_write
echo "totalBackupGigabytesUsed,Project=$1 value=$TOTAL_BACKUP_GIGABYTES_USED"      	>> $quota_write
echo "maxTotalVolumes,Project=$1 value=$MAX_TOTAL_VOLUMES"      			>> $quota_write
echo "totalVolumesUsed,Project=$1 value=$TOTAL_VOLUMES_USED"      			>> $quota_write
echo "totalBackupsUsed,Project=$1 value=$TOTAL_BACKUPS_USED"      			>> $quota_write
echo "totalGigabytesUsed,Project=$1 value=$TOTAL_GIGABYTES_USED"      			>> $quota_write
echo "totalVolumesUsedGB,Project=$1 value=$TOTAL_VOLUMES_USED_GIGABYTES"		>> $quota_write
echo "totalSnapshotsUsedGB,Project=$1 value=$TOTAL_SNAPSHOTS_USED_GIGABYTES"		>> $quota_write
echo "totalStorageUsedGB,Project=$1 value=$TOTAL_STORAGE_QUOTA_GIGABYTES"		>> $quota_write
echo "instancesActive,Project=$1 value=$INSTANCES_ACTIVE"  	    			>> $quota_write
echo "instancesShutdown,Project=$1 value=$INSTANCES_SHUTDOWN"      			>> $quota_write

# post the data to the database
POST="curl -i -XPOST \""$2\"" --data-binary @$quota_write"
eval $POST

# clean up the processed files.
rm $q_json
rm $os_q
rm $os_vol
rm $os_vs
rm $os_is
rm $quota_write
